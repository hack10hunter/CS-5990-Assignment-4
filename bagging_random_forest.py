#-------------------------------------------------------------------------
# AUTHOR: Weisheng Zhang
# FILENAME: bagging_random_forest.py
# SPECIFICATION: Built a base classifier by using decision tree, ensemble classfier and random forest classifier
# FOR: CS 5990- Assignment #4
# TIME SPENT: 1 hour
#-----------------------------------------------------------*/

#importing some Python libraries
from sklearn import tree
from sklearn.utils import resample
from sklearn.ensemble import RandomForestClassifier
import numpy as np
import pandas as pd

dbTraining = []
dbTest = []
X_training = []
y_training = []
classVotes = [] #this array will be used to count the votes of each classifier

#reading the training data from a csv file and populate dbTraining
#--> add your Python code here
df = pd.read_csv('optdigits.tra', sep=',', header=None)
dbTraining = np.array(df.values)

#reading the test data from a csv file and populate dbTest
#--> add your Python code here
df = pd.read_csv('optdigits.tes', sep=',', header=None)
dbTest = np.array(df.values)

#inititalizing the class votes for each test sample. Example: classVotes.append([0,0,0,0,0,0,0,0,0,0])
#--> add your Python code here
for i in range(len(dbTest)):
   classVotes.append([0,0,0,0,0,0,0,0,0,0])

print("Started my base and ensemble classifier ...")

correct, total, accuracy = 0, 0, 0
for k in range(20): #we will create 20 bootstrap samples here (k = 20). One classifier will be created for each bootstrap sample

  bootstrapSample = resample(dbTraining, n_samples=len(dbTraining), replace=True)
  #populate the values of X_training and y_training by using the bootstrapSample
  #--> add your Python code here
  X_training = bootstrapSample[0:, 0:64]
  y_training = bootstrapSample[0:, 64]

  #fitting the decision tree to the data
  clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth=None) #we will use a single decision tree without pruning it
  clf = clf.fit(X_training, y_training)


  for i, testSample in enumerate(dbTest):

      #make the classifier prediction for each test sample and update the corresponding index value in classVotes. For instance,
      # if your first base classifier predicted 2 for the first test sample, then classVotes[0,0,0,0,0,0,0,0,0,0] will change to classVotes[0,0,1,0,0,0,0,0,0,0].
      # Later, if your second base classifier predicted 3 for the first test sample, then classVotes[0,0,1,0,0,0,0,0,0,0] will change to classVotes[0,0,1,1,0,0,0,0,0,0]
      # Later, if your third base classifier predicted 3 for the first test sample, then classVotes[0,0,1,1,0,0,0,0,0,0] will change to classVotes[0,0,1,2,0,0,0,0,0,0]
      # this array will consolidate the votes of all classifier for all test samples
      #--> add your Python code here
      prediction = clf.predict([testSample[0:64]])
      classVotes[i][prediction[0]] += 1
      if k == 0: #for only the first base classifier, compare the prediction with the true label of the test sample here to start calculating its accuracy
         #--> add your Python code here
         total += 1
         if prediction[0] == testSample[64]:
            correct += 1
  if k == 0: #for only the first base classifier, print its accuracy here
     #--> add your Python code here
     accuracy = correct/total
     print("Finished my base classifier (fast but relatively low accuracy) ...")
     print("My base classifier accuracy: " + str(accuracy))
     print("")

  #now, compare the final ensemble prediction (majority vote in classVotes) for each test sample with the ground truth label to calculate the accuracy of the ensemble classifier (all base classifiers together)
  #--> add your Python code here
correct= 0
for i in range(len(classVotes)):
   majorityVote = classVotes[i].index(max(classVotes[i]))
   if majorityVote == dbTest[i][64]:
      correct += 1   
#printing the ensemble accuracy here
accuracy = correct/total
print("Finished my ensemble classifier (slow but higher accuracy) ...")
print("My ensemble accuracy: " + str(accuracy))
print("")

print("Started Random Forest algorithm ...")

#Create a Random Forest Classifier
clf=RandomForestClassifier(n_estimators=20) #this is the number of decision trees that will be generated by Random Forest. The sample of the ensemble method used before

#Fit Random Forest to the training data
clf.fit(X_training,y_training)

#make the Random Forest prediction for each test sample. Example: class_predicted_rf = clf.predict([[3, 1, 2, 1, ...]]
#--> add your Python code here
correct = 0
for i, testSample in enumerate(dbTest):
   prediction = clf.predict([testSample[0:64]])
   if prediction == testSample[64]:
      correct += 1
accuracy = correct/total

#compare the Random Forest prediction for each test sample with the ground truth label to calculate its accuracy
#--> add your Python code here

#printing Random Forest accuracy here
print("Random Forest accuracy: " + str(accuracy))

print("Finished Random Forest algorithm (much faster and higher accuracy!) ...")
